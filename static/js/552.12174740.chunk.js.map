{"version":3,"file":"static/js/552.12174740.chunk.js","mappings":"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","sources":["components/Masonry/Masonry.styled.js","components/Masonry/ImageWithSkeleton.js","components/Masonry/index.js","pages/MasonryPage.js"],"sourcesContent":["import styled from 'styled-components';\nconst MasonryContainer = styled.div`\n  display: flex;\n  width: 100%;\n`;\n\nconst MasonryItem = styled.div`\n  border: 1px solid #ccc;\n`;\nconst MasonryColumn = styled.div`\n  margin: 2px;\n`;\nconst MasonryImage = styled.img`\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n\n  &:hover {\n    cursor: pointer;\n    opacity: 0.85;\n  }\n`;\nconst SkeletonContainer = styled.div`\n  overflow: hidden;\n  position: relative;\n  width: 100%;\n  height: 100%;\n  background-color: #eee;\n`;\nconst SkeletonImage = styled.div`\n  overflow: hidden;\n  position: relative;\n  width: 100%;\n  height: 100%;\n\n  background: linear-gradient(90deg, #f0f0f0 25%, #ededed 50%, #f0f0f0 75%);\n  animation: loading 2.5s infinite;\n\n  @keyframes loading {\n    0% {\n      transform: translateX(-100%);\n    }\n    100% {\n      transform: translateX(100%);\n    }\n  }\n`;\nexport {\n  MasonryContainer,\n  MasonryColumn,\n  MasonryItem,\n  MasonryImage,\n  SkeletonImage,\n  SkeletonContainer,\n};\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  MasonryImage,\n  SkeletonContainer,\n  SkeletonImage,\n} from './Masonry.styled';\n\nconst ImageWithSkeleton = (props) => {\n  const { src, alt, ...rest } = props;\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const img = new Image();\n    img.src = src;\n\n    img.onload = () => {\n      setLoading(false);\n    };\n  }, [src]);\n  return (\n    <>\n      {loading ? (\n        <SkeletonContainer>\n          <SkeletonImage />\n        </SkeletonContainer>\n      ) : (\n        <MasonryImage src={src} alt={alt} {...rest} />\n      )}\n    </>\n  );\n};\n\nImageWithSkeleton.propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired,\n};\n\nexport default ImageWithSkeleton;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { MasonryContainer, MasonryItem, MasonryColumn } from './Masonry.styled';\nimport { isImageUrl } from '../utility';\nimport ImageWithSkeleton from './ImageWithSkeleton';\n\nconst Masonry = (props) => {\n  const { items, columns, gap, onItemClick, ...rest } = props;\n\n  const [res, setResult] = useState([]);\n\n  const columnWrapper = {};\n  const result = [];\n  const handleClickItem = (item) => (e) => onItemClick(item);\n  // create columns\n\n  const RenderMasonryItem = () => {\n    for (let i = 0; i < columns; i++) {\n      columnWrapper[`column-${i}`] = [];\n    }\n    // divide items into columns\n    for (let i = 0; i < items.length; i++) {\n      const columnIndex = i % columns;\n      const height = 100 + Math.ceil(Math.random() * 200);\n\n      columnWrapper[`column-${columnIndex}`].push(\n        <MasonryItem\n          key={`column-${columnIndex}-item-${i}`}\n          style={{\n            marginBottom: `${gap}px`,\n            height: `${height}px`,\n          }}\n        >\n          {isImageUrl(items[i]) ? (\n            <ImageWithSkeleton\n              key={`image-column-${columnIndex}-item-${i}`}\n              src={items[i]}\n              alt={`image-column-${columnIndex}-item-${i}`}\n              onClick={handleClickItem(items[i])}\n            />\n          ) : (\n            items[i]\n          )}\n        </MasonryItem>\n      );\n    }\n  };\n  const RenderMasonryColumn = () => {\n    // wrap items in each column with a div\n    for (let i = 0; i < columns; i++) {\n      result.push(\n        <MasonryColumn\n          key={`column-${i}}`}\n          style={{\n            marginLeft: `${i > 0 ? gap : 0}px`,\n            flex: 1,\n          }}\n        >\n          {columnWrapper[`column-${i}`]}\n        </MasonryColumn>\n      );\n    }\n    setResult(result);\n  };\n  useEffect(() => {\n    RenderMasonryItem();\n    RenderMasonryColumn();\n    /* eslint-disable react-hooks/exhaustive-deps */\n  }, []);\n  return <MasonryContainer {...rest}>{res}</MasonryContainer>;\n};\n\nMasonry.propTypes = {\n  columns: PropTypes.number.isRequired,\n  gap: PropTypes.number.isRequired,\n  items: PropTypes.arrayOf(PropTypes.node),\n  onItemClick: PropTypes.func,\n};\n\nMasonry.defaultProps = {\n  columns: 2,\n  gap: 20,\n  items: [],\n};\nexport default Masonry;\n","import React, { useState } from 'react';\nimport Masonry from '../components/Masonry';\n\nimport PortletView from '../components/Portlet';\n\nimport CodeBlock from './pageUtils';\nimport Modal from '../components/Modal';\nimport fake_data from '../fake-data';\nimport image1 from './../assets/images/image1.jpg';\nimport image2 from './../assets/images/image2.jpg';\nimport image3 from './../assets/images/image3.jpg';\nimport image4 from './../assets/images/image4.jpg';\nimport image5 from './../assets/images/image5.jpg';\nimport image6 from './../assets/images/image6.jpg';\nimport image7 from './../assets/images/image7.jpg';\nimport image8 from './../assets/images/image8.jpg';\nimport image9 from './../assets/images/image9.jpg';\nimport image10 from './../assets/images/image10.jpg';\nimport image11 from './../assets/images/image11.jpg';\nimport image12 from './../assets/images/image12.jpg';\n\nconst items = [\n  image1,\n  image2,\n  image3,\n  image4,\n  image5,\n  image6,\n  image7,\n  image8,\n  image9,\n  image10,\n  image11,\n  image12,\n];\nconst MasonryPage = () => {\n  const { masonry } = fake_data.pages;\n  const [modalOpen, setModalOpen] = useState(false);\n  const [selectedImage, setSelectedImage] = useState(null);\n\n  const toggle = (e) => setModalOpen(!modalOpen);\n  const handelClickedImage = (url) => {\n    setSelectedImage(url);\n    setModalOpen({ 1: true });\n  };\n\n  return (\n    <>\n      <PortletView\n        title={masonry.page.title}\n        content={\n          <>\n            <Masonry\n              columns={3}\n              gap={5}\n              items={items}\n              onItemClick={handelClickedImage}\n            />\n            <Modal\n              onToggleModal={toggle}\n              show={modalOpen}\n              style={{ background: 'transparent' }}\n              $lg\n            >\n              <Modal.Header\n                style={{\n                  padding: '0px',\n                  color: 'white',\n                  height: '20px',\n                  border: 'none',\n                }}\n              />\n              <Modal.Body\n                style={{\n                  display: 'flex',\n                  justifyContent: 'center',\n                  background: 'transparent',\n                }}\n              >\n                <img\n                  style={{ objectFit: 'cover' }}\n                  src={selectedImage}\n                  alt=\"selected image\"\n                  width=\"100%\"\n                  height=\"auto\"\n                />\n              </Modal.Body>\n            </Modal>\n          </>\n        }\n        footer={\n          <CodeBlock\n            code={`\n              \n              \n          const items = [\n            'images/image1.jpg',\n            'images/image2.jpg',\n            'images/image3.jpg',\n            'images/image4.jpg',\n            'images/image5.jpg',\n            'images/image6.jpg',\n            'images/image7.jpg',\n            'images/image8.jpg',\n            'images/image9.jpg',\n            'images/image10.jpg',\n          ];\n          <Masonry columns={3} gap={5} items={items} />\n          `}\n          />\n        }\n      />\n    </>\n  );\n};\n\nexport default MasonryPage;\n"],"names":["MasonryContainer","styled","div","_templateObject","_taggedTemplateLiteral","MasonryItem","_templateObject2","MasonryColumn","_templateObject3","MasonryImage","img","_templateObject4","SkeletonContainer","_templateObject5","SkeletonImage","_templateObject6","props","src","alt","rest","_objectWithoutProperties","_excluded","_useState","useState","_useState2","_slicedToArray","loading","setLoading","useEffect","Image","onload","_jsx","_Fragment","children","_objectSpread","Masonry","items","columns","gap","onItemClick","res","setResult","columnWrapper","result","handleClickItem","item","e","i","concat","length","columnIndex","height","Math","ceil","random","push","style","marginBottom","isImageUrl","ImageWithSkeleton","onClick","RenderMasonryItem","marginLeft","flex","RenderMasonryColumn","defaultProps","masonry","fake_data","pages","modalOpen","setModalOpen","_useState3","_useState4","selectedImage","setSelectedImage","PortletView","title","page","content","_jsxs","url","Modal","onToggleModal","show","background","$lg","Header","padding","color","border","Body","display","justifyContent","objectFit","width","footer","CodeBlock","code"],"sourceRoot":""}